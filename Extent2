package utilities.logging;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.MediaEntityBuilder;
import utilities.reporting.ExtentManager;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.WebDriver;
import org.apache.commons.io.FileUtils;

import java.io.File;
import java.io.IOException;

public class CustomLogger {

    private static final Logger logger = LogManager.getLogger(CustomLogger.class);

    // Log information to both Logger and ExtentReports
    public void info(String message) {
        logger.info(message);  // Log4j logging
        ExtentTest test = ExtentManager.getExtentTest();
        if (test != null) {
            test.info(message);  // ExtentReport logging
        }
    }

    // Log errors to both Logger and ExtentReports
    public void error(String message) {
        logger.error(message);
        ExtentTest test = ExtentManager.getExtentTest();
        if (test != null) {
            test.error(message);
        }
    }

    // Log errors with screenshot
    public void errorWithScreenshot(String message, WebDriver driver) {
        String screenshotPath = takeScreenshot(driver, message);
        try {
            ExtentTest test = ExtentManager.getExtentTest();
            if (test != null) {
                test.fail(message, MediaEntityBuilder.createScreenCaptureFromPath(screenshotPath).build());
            }
        } catch (IOException e) {
            logger.error("Failed to attach screenshot: " + e.getMessage());
        }
    }

    // Helper method to take screenshot
    private String takeScreenshot(WebDriver driver, String screenshotName) {
        File srcFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
        String destPath = "screenshots/" + screenshotName + ".png";
        try {
            FileUtils.copyFile(srcFile, new File(destPath));
        } catch (IOException e) {
            logger.error("Failed to capture screenshot: " + e.getMessage());
        }
        return destPath;
    }
}


package listeners;

import org.testng.ITestListener;
import org.testng.ITestResult;
import utilities.logging.CustomLogger;
import utilities.reporting.ExtentManager;
import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import org.openqa.selenium.WebDriver;

public class TestListener implements ITestListener {

    private static ExtentReports extent = ExtentManager.getInstance();
    private WebDriver driver;

    @Override
    public void onTestStart(ITestResult result) {
        ExtentTest test = extent.createTest(result.getMethod().getMethodName());
        ExtentManager.setExtentTest(test);  // Set ExtentTest globally for the current thread
    }

    @Override
    public void onTestFailure(ITestResult result) {
        CustomLogger customLogger = new CustomLogger();
        customLogger.errorWithScreenshot("Test Failed: " + result.getName(), driver);
    }

    @Override
    public void onTestSuccess(ITestResult result) {
        CustomLogger customLogger = new CustomLogger();
        customLogger.info("Test passed: " + result.getMethod().getMethodName());
    }

    @Override
    public void onTestSkipped(ITestResult result) {
        CustomLogger customLogger = new CustomLogger();
        customLogger.info("Test skipped: " + result.getMethod().getMethodName());
    }
}


package common;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import utilities.logging.CustomLogger;

public class SeleniumBasic {

    private CustomLogger customLogger = new CustomLogger();

    public void clickElement(WebElement element) {
        try {
            customLogger.info("Attempting to click on element: " + element.toString());
            element.click();
            customLogger.info("Successfully clicked on element: " + element.toString());
        } catch (Exception e) {
            customLogger.error("Failed to click on element: " + element.toString());
            throw e;
        }
    }

    public void performActionWithFailure(WebElement element, WebDriver driver) {
        try {
            customLogger.info("Performing action on element: " + element.toString());
        } catch (Exception e) {
            customLogger.errorWithScreenshot("Action failed on element", driver);
            throw e;
        }
    }
}
